@import './palette';

$_theme-generate-default-density: true !default;

@function contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

@function palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result: map-merge(
    $base-palette,
    (
      default: map-get($base-palette, $default),
      lighter: map-get($base-palette, $lighter),
      darker: map-get($base-palette, $darker),
      text: map-get($base-palette, $text),
      default-contrast: contrast($base-palette, $default),
      lighter-contrast: contrast($base-palette, $lighter),
      darker-contrast: contrast($base-palette, $darker),
    )
  );

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map-merge(
      $result,
      (
        '#{$hue}-contrast': contrast($base-palette, $hue),
      )
    );
  }

  @return $result;
}


@function color($palette, $hue: default, $opacity: null) {
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);

  @if (type-of($color) != color) {
    @return $color;
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

@function _validate-theme($theme) {
  @if map-get($theme, color) {
    $color: map-get($theme, color);
    @if not map-get($color, primary) {
      @error 'Theme does not define a valid "primary" palette.';
    } @else if not map-get($color, accent) {
      @error 'Theme does not define a valid "accent" palette.';
    } @else if not map-get($color, warn) {
      @error 'Theme does not define a valid "warn" palette.';
    }
  }
  @return $theme;
}

@function _create-backwards-compatibility-theme($theme) {
  @if not map-get($theme, color) {
    @return $theme;
  }
  $color: map-get($theme, color);
  @return map-merge($theme, $color);
}

@function _create-light-color-config($primary, $accent, $warn: null, $custom: ()) {
  $config: (
    primary-text: color(palette($primary), default-contrast),
    primary-background: color(palette($primary)),
    accent-background: color(palette($accent)),
  );

  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, palette($mat-red)),
    is-dark: false,
    theme: map-merge(map-merge($config, $light-theme), $custom)
  );
}

@function _create-dark-color-config($primary, $accent, $warn: null, $custom: ()) {
  $config: (
    primary-text: color(palette($primary), default-contrast),
    primary-background: color(palette($primary), darker),
    accent-background: color(palette($accent), darker),
  );
  @return (
    primary: $primary,
    accent: $accent,
    warn: if($warn != null, $warn, palette($mat-red)),
    is-dark: true,
    theme: map-merge(map-merge($config, $dark-theme), $custom)
  );
}

@function light-theme($primary, $accent: null, $warn: mat-palette($mat-red), $custom: ()) {
  $result: $primary;
  $result: map-merge(
    $result,
    (
      color: _create-light-color-config($primary, $accent, $warn, $custom),
    )
  );
  @return _create-backwards-compatibility-theme(_validate-theme($result));
}


@function dark-theme($primary, $accent: null, $warn: mat-palette($mat-red), $custom: ()) {
  $result: $primary;
  $result: map-merge(
    $result,
    (
      color: _create-dark-color-config($primary, $accent, $warn, $custom),
    )
  );
  @return _create-backwards-compatibility-theme(_validate-theme($result));
}

@function get-color-config($theme, $default: null) {
  
  @if not _is-theme-object($theme) {
    @return $theme;
  }
  @if map-has-key($theme, color) {
    // @debug 'map-has-key' map-get($theme, color);
    @return map-get($theme, color);
  }

  @debug 'get-color-config' $default;
  @return $default;
}


@function get-density-config($theme-or-config, $default: 0) {
  @if not _is-theme-object($theme-or-config) {
    @return $theme-or-config;
  }
  @if map-has-key($theme-or-config, density) {
    @return map-get($theme-or-config, density);
  }
  @return $default;
}


@function get-typography-config($theme-or-config, $default: null) {
  @if not _is-theme-object($theme-or-config) {
    @return $theme-or-config;
  }
  @if (map-has-key($theme-or-config, typography)) {
    @return map-get($theme-or-config, typography);
  }
  @return $default;
}


@function _is-theme-object($value) {
  @return type-of($value) == 'map' and
    (
      map-has-key($value, color) or map-has-key($value, density) or map-has-key($value, typography) or length($value) ==
        0
    );
}
